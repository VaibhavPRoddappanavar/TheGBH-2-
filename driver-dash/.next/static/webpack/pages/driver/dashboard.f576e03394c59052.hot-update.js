"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/driver/dashboard",{

/***/ "./services/api.js":
/*!*************************!*\
  !*** ./services/api.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   driverAPI: function() { return /* binding */ driverAPI; },\n/* harmony export */   rideAPI: function() { return /* binding */ rideAPI; }\n/* harmony export */ });\nconst API_BASE_URL = \"http://localhost:4000/api\";\n// Driver API calls\nconst driverAPI = {\n    getAllDrivers: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/drivers\"));\n        return response.json();\n    },\n    addDriver: async (driverData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/drivers\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(driverData)\n        });\n        return response.json();\n    },\n    updatePreferences: async (driverId, preferences)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/drivers/\").concat(driverId, \"/preferences\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                preferences\n            })\n        });\n        return response.json();\n    },\n    updateStatus: async (driverId, status)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/drivers/\").concat(driverId, \"/status\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                status\n            })\n        });\n        return response.json();\n    },\n    deleteDriver: async (driverId)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/drivers/\").concat(driverId), {\n            method: \"DELETE\"\n        });\n        return response.json();\n    }\n};\n// Ride API calls\nconst rideAPI = {\n    getAllRides: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/rides\"));\n        return response.json();\n    },\n    getPendingRides: async ()=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/rides/pending\"));\n        return response.json();\n    },\n    createRide: async (rideData)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/rides\"), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(rideData)\n        });\n        return response.json();\n    },\n    acceptRide: async (rideId, driverId)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/rides/\").concat(rideId, \"/accept\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                driverId\n            })\n        });\n        return response.json();\n    },\n    rejectRide: async (rideId, driverId)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/rides/\").concat(rideId, \"/reject\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                driverId\n            })\n        });\n        return response.json();\n    },\n    completeRide: async (rideId)=>{\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/rides/\").concat(rideId, \"/complete\"), {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        return response.json();\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU8sY0FBWTtZQUN2RWpCLFFBQVE7WUFDUkMsU0FBUztnQkFDUCxnQkFBZ0I7WUFDbEI7UUFDRjtRQUNBLE9BQU9OLFNBQVNFLElBQUk7SUFDdEI7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NlcnZpY2VzL2FwaS5qcz84MDNjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFQSV9CQVNFX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0OjQwMDAvYXBpJztcblxuLy8gRHJpdmVyIEFQSSBjYWxsc1xuZXhwb3J0IGNvbnN0IGRyaXZlckFQSSA9IHtcbiAgZ2V0QWxsRHJpdmVyczogYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX0JBU0VfVVJMfS9kcml2ZXJzYCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfSxcblxuICBhZGREcml2ZXI6IGFzeW5jIChkcml2ZXJEYXRhKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2RyaXZlcnNgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkcml2ZXJEYXRhKSxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICB9LFxuXG4gIHVwZGF0ZVByZWZlcmVuY2VzOiBhc3luYyAoZHJpdmVySWQsIHByZWZlcmVuY2VzKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2RyaXZlcnMvJHtkcml2ZXJJZH0vcHJlZmVyZW5jZXNgLCB7XG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgcHJlZmVyZW5jZXMgfSksXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfSxcblxuICB1cGRhdGVTdGF0dXM6IGFzeW5jIChkcml2ZXJJZCwgc3RhdHVzKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2RyaXZlcnMvJHtkcml2ZXJJZH0vc3RhdHVzYCwge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHN0YXR1cyB9KSxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICB9LFxuXG4gIGRlbGV0ZURyaXZlcjogYXN5bmMgKGRyaXZlcklkKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L2RyaXZlcnMvJHtkcml2ZXJJZH1gLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH0sXG59O1xuXG4vLyBSaWRlIEFQSSBjYWxsc1xuZXhwb3J0IGNvbnN0IHJpZGVBUEkgPSB7XG4gIGdldEFsbFJpZGVzOiBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L3JpZGVzYCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfSxcblxuICBnZXRQZW5kaW5nUmlkZXM6IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vcmlkZXMvcGVuZGluZ2ApO1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH0sXG5cbiAgY3JlYXRlUmlkZTogYXN5bmMgKHJpZGVEYXRhKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L3JpZGVzYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmlkZURhdGEpLFxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH0sXG5cbiAgYWNjZXB0UmlkZTogYXN5bmMgKHJpZGVJZCwgZHJpdmVySWQpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vcmlkZXMvJHtyaWRlSWR9L2FjY2VwdGAsIHtcbiAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBkcml2ZXJJZCB9KSxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICB9LFxuXG4gIHJlamVjdFJpZGU6IGFzeW5jIChyaWRlSWQsIGRyaXZlcklkKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfQkFTRV9VUkx9L3JpZGVzLyR7cmlkZUlkfS9yZWplY3RgLCB7XG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZHJpdmVySWQgfSksXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfSxcblxuICBjb21wbGV0ZVJpZGU6IGFzeW5jIChyaWRlSWQpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vcmlkZXMvJHtyaWRlSWR9L2NvbXBsZXRlYCwge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfSxcbn07XG4iXSwibmFtZXMiOlsiQVBJX0JBU0VfVVJMIiwiZHJpdmVyQVBJIiwiZ2V0QWxsRHJpdmVycyIsInJlc3BvbnNlIiwiZmV0Y2giLCJqc29uIiwiYWRkRHJpdmVyIiwiZHJpdmVyRGF0YSIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInVwZGF0ZVByZWZlcmVuY2VzIiwiZHJpdmVySWQiLCJwcmVmZXJlbmNlcyIsInVwZGF0ZVN0YXR1cyIsInN0YXR1cyIsImRlbGV0ZURyaXZlciIsInJpZGVBUEkiLCJnZXRBbGxSaWRlcyIsImdldFBlbmRpbmdSaWRlcyIsImNyZWF0ZVJpZGUiLCJyaWRlRGF0YSIsImFjY2VwdFJpZGUiLCJyaWRlSWQiLCJyZWplY3RSaWRlIiwiY29tcGxldGVSaWRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./services/api.js\n"));

/***/ })

});